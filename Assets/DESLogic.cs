using System; using System.Collections.Generic; using System.Linq; using System.Text;  namespace DESLogic {      class MainClass      {          int b1 = 0;          int b2 = 0;          int b3 = 0;          int b4 = 0;          int b5 = 0;          int b6 = 0;          int b7 = 0;          int b8 = 1;                int b9 = 0;          int b10 = 0;          int b11 = 1;          int b12 = 0;          int b13 = 0;          int b14 = 0;          int b15 = 1;          int b16 = 1;            int b17 = 0;          int b18 = 1;          int b19 = 0;          int b20 = 0;          int b21 = 0;          int b22 = 1;          int b23 = 0;          int b24 = 1;           int b25 = 0;          int b26 = 1;          int b27 = 1;          int b28 = 0;          int b29 = 0;          int b30 = 1;          int b31 = 1;          int b32 = 1;           int b33 = 1;          int b34 = 0;          int b35 = 0;          int b36 = 0;          int b37 = 1;          int b38 = 0;          int b39 = 0;          int b40 = 1;           int b41 = 1;          int b42 = 0;          int b43 = 1;          int b44 = 0;          int b45 = 1;          int b46 = 0;          int b47 = 1;          int b48 = 1;           int b49 = 1;          int b50 = 1;          int b51 = 0;          int b52 = 0;          int b53 = 1;          int b54 = 1;          int b55 = 0;          int b56 = 1;           int b57 = 1;          int b58 = 1;          int b59 = 1;          int b60 = 0;          int b61 = 1;          int b62 = 1;          int b63 = 1;          int b64 = 1;             //initial permutation          int ip1;          int ip2;          int ip3;          int ip4;          int ip5;          int ip6;          int ip7;          int ip8;           int ip9;          int ip10;          int ip11;          int ip12;          int ip13;          int ip14;          int ip15;          int ip16;           int ip17;          int ip18;          int ip19;          int ip20;          int ip21;          int ip22;          int ip23;          int ip24;           int ip25;          int ip26;          int ip27;          int ip28;          int ip29;          int ip30;          int ip31;          int ip32;           int ip33;          int ip34;          int ip35;          int ip36;          int ip37;          int ip38;          int ip39;          int ip40;           int ip41;          int ip42;          int ip43;          int ip44;          int ip45;          int ip46;          int ip47;          int ip48;           int ip49;          int ip50;          int ip51;          int ip52;          int ip53;          int ip54;          int ip55;          int ip56;           int ip57;          int ip58;          int ip59;          int ip60;          int ip61;          int ip62;          int ip63;          int ip64;             //expansion permutation          int e1;          int e2;          int e3;          int e4;          int e5;          int e6;          int e7;          int e8;           int e9;          int e10;          int e11;          int e12;          int e13;          int e14;          int e15;          int e16;           int e17;          int e18;          int e19;          int e20;          int e21;          int e22;          int e23;          int e24;           int e25;          int e26;          int e27;          int e28;          int e29;          int e30;          int e31;          int e32;           int e33;          int e34;          int e35;          int e36;          int e37; 

         int e38;          int e39;          int e40;           int e41;          int e42;          int e43;          int e44;          int e45;          int e46;          int e47;          int e48;             //xor values          int x1;          int x2;          int x3;          int x4;          int x5;          int x6;          int x7;          int x8;           int x9;          int x10;          int x11;          int x12;          int x13;          int x14;          int x15;          int x16;           int x17;          int x18;          int x19;          int x20;          int x21;          int x22;          int x23;          int x24;           int x25;          int x26;          int x27;          int x28;          int x29;          int x30;          int x31;          int x32;           int x33;          int x34;          int x35;          int x36;          int x37;          int x38;          int x39;          int x40;           int x41;          int x42;          int x43;          int x44;          int x45;          int x46;          int x47;          int x48;             //new r and l          public int nr1;
         public int nr2;
         public int nr3;
         public int nr4;
         public int nr5;          public int nr6;          public int nr7;          public int nr8;

         public int nr9;          public int nr10;          public int nr11;          public int nr12;          public int nr13;          public int nr14;          public int nr15;          public int nr16;           public int nr17;          public int nr18;          public int nr19;          public int nr20;          public int nr21;          public int nr22;          public int nr23;          public int nr24;           public int nr25;          public int nr26;          public int nr27;          public int nr28;          public int nr29;          public int nr30;          public int nr31;          public int nr32;           public int nl1;          public int nl2;          public int nl3;          public int nl4;          public int nl5;          public int nl6;          public int nl7;          public int nl8;           public int nl9;          public int nl10;          public int nl11;          public int nl12;          public int nl13;          public int nl14;          public int nl15;          public int nl16;           public int nl17;          public int nl18;          public int nl19;          public int nl20;          public int nl21;          public int nl22;          public int nl23;          public int nl24;           public int nl25;          public int nl26;          public int nl27;          public int nl28;          public int nl29;          public int nl30;          public int nl31;          public int nl32;               //key          int k1 = 0;          int k2 = 0;          int k3 = 0;          int k4 = 1;          int k5 = 0;          int k6 = 0;          int k7 = 1;          int k8 = 1;           int k9 = 0;          int k10 = 0;          int k11 = 1;          int k12 = 1;          int k13 = 0;          int k14 = 1;          int k15 = 0;          int k16 = 0;           int k17 = 0;          int k18 = 1;          int k19 = 0;          int k20 = 1;          int k21 = 0;          int k22 = 1;          int k23 = 1;          int k24 = 1;           int k25 = 0;          int k26 = 1;          int k27 = 1;          int k28 = 1;          int k29 = 1;          int k30 = 0;          int k31 = 0;          int k32 = 1;           int k33 = 1;          int k34 = 0;          int k35 = 0;          int k36 = 1;          int k37 = 1;          int k38 = 0;          int k39 = 1;          int k40 = 1;           int k41 = 1;          int k42 = 0;          int k43 = 1;          int k44 = 1;          int k45 = 1;          int k46 = 1;          int k47 = 0;          int k48 = 0;           int k49 = 1;          int k50 = 1;          int k51 = 0;          int k52 = 1;          int k53 = 1;          int k54 = 1;          int k55 = 1;          int k56 = 1;           int k57 = 1;          int k58 = 1;          int k59 = 1;          int k60 = 1;          int k61 = 0;          int k62 = 0;          int k63 = 0;          int k64 = 1;             //permuted choice 2          int pct1;          int pct2;          int pct3;          int pct4;          int pct5;          int pct6;          int pct7;          int pct8;           int pct9;          int pct10;          int pct11;          int pct12;          int pct13;          int pct14;          int pct15;          int pct16;           int pct17;          int pct18;          int pct19;          int pct20;          int pct21;          int pct22;          int pct23;          int pct24;           int pct25;          int pct26;          int pct27;          int pct28;          int pct29;          int pct30;          int pct31;          int pct32;           int pct33;          int pct34;          int pct35;          int pct36;          int pct37;          int pct38;          int pct39;          int pct40;           int pct41;          int pct42;          int pct43;          int pct44;          int pct45;          int pct46;          int pct47;          int pct48;             //sboxes          int[,] sbox1 = new int[4, 16] { {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7} ,                                          {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8} ,                                          {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0} ,                                          {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}                                        };          int[,] sbox2 = new int[4, 16] { {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10} ,                                          {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5} ,                                          {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15} ,                                          {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}                                        };          int[,] sbox3 = new int[4, 16] { {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8} ,                                          {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1} ,                                          {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7} ,                                          {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}                                        };          int[,] sbox4 = new int[4, 16] { {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15} ,                                          {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9} ,                                          {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4} ,                                          {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}                                        };          int[,] sbox5 = new int[4, 16] { {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9} ,                                          {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,3} ,                                          {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14} ,                                          {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}                                        };          int[,] sbox6 = new int[4, 16] { {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11} ,                                          {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8} ,                                          {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6} ,                                          {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}                                        };          int[,] sbox7 = new int[4, 16] { {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1} ,                                          {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6} ,                                          {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2} ,                                          {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}                                        };
         int[,] sbox8 = new int[4, 16] { {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7} ,                                          {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2} ,                                          {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8} ,                                          {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}                                        };              //sbox values          int s1;          int s2;          int s3;          int s4;          int s5;          int s6;          int s7;          int s8;           int s9;          int s10;          int s11;          int s12;          int s13;          int s14;          int s15;          int s16;           int s17;          int s18;          int s19;          int s20;          int s21;          int s22;          int s23;          int s24;           int s25;          int s26;          int s27;          int s28;          int s29;          int s30;          int s31;          int s32;             //permutation values          int p1;          int p2;          int p3;          int p4;          int p5;          int p6;          int p7;          int p8;           int p9;          int p10;          int p11;          int p12;          int p13;          int p14;          int p15;          int p16;           int p17;          int p18;          int p19;          int p20;          int p21;          int p22;          int p23;          int p24;           int p25;          int p26;          int p27;          int p28;          int p29;          int p30;          int p31;          int p32;             //d and c          int c1;          int c2;          int c3;          int c4;          int c5;          int c6;          int c7;           int c8;          int c9;          int c10;          int c11;          int c12;          int c13;          int c14;           int c15;          int c16;          int c17;          int c18;          int c19;          int c20;          int c21;           int c22;          int c23;          int c24;          int c25;          int c26;          int c27;          int c28;           int d29;          int d30;          int d31;          int d32;          int d33;          int d34;          int d35;           int d36;          int d37;          int d38;          int d39;          int d40;          int d41;          int d42;           int d43;          int d44;          int d45;          int d46;          int d47;          int d48;          int d49;           int d50;          int d51;          int d52;          int d53;          int d54;          int d55;          int d56;           public int[] lshifts = new int[17] {0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1} ;           int or1;          int or2;          int or3;          int or4;          int or5;          int or6;          int or7;          int or8;           int or9;          int or10;          int or11;          int or12;          int or13;          int or14;          int or15;          int or16;           int or17;          int or18;          int or19;          int or20;          int or21;          int or22;          int or23;          int or24;           int or25;          int or26;          int or27;          int or28;          int or29;          int or30;          int or31;          int or32;



        public int fp1;
        public int fp2;
        public int fp3;
        public int fp4;
        public int fp5;
        public int fp6;
        public int fp7;
        public int fp8;

        public int fp9;
        public int fp10;
        public int fp11;
        public int fp12;
        public int fp13;
        public int fp14;
        public int fp15;
        public int fp16;

        public int fp17;
        public int fp18;
        public int fp19;
        public int fp20; 

        public int fp21;
        public int fp22;
        public int fp23;
        public int fp24;

        public int fp25;
        public int fp26;
        public int fp27;
        public int fp28;
        public int fp29;
        public int fp30;
        public int fp31;
        public int fp32;

        public int fp33;
        public int fp34;
        public int fp35;
        public int fp36;
        public int fp37;
        public int fp38;
        public int fp39;
        public int fp40;

        public int fp41;
        public int fp42;
        public int fp43;
        public int fp44;
        public int fp45;
        public int fp46;
        public int fp47;
        public int fp48;

        public int fp49;
        public int fp50;
        public int fp51;
        public int fp52;
        public int fp53;
        public int fp54;
        public int fp55;
        public int fp56;

        public int fp57;
        public int fp58;
        public int fp59;
        public int fp60;
        public int fp61;
        public int fp62;
        public int fp63;
        public int fp64;

        public string StringToBinary(string data)          {              StringBuilder sb = new StringBuilder();               foreach (char c in data.ToCharArray())              {                 sb.Append(Convert.ToString(c, 2).PadLeft(8, '0'));              }              return sb.ToString();          }           public string BinaryToString(string data)          {              List<Byte> byteList = new List<Byte>();               for (int i = 0; i < data.Length; i += 8)              {                 byteList.Add(Convert.ToByte(data.Substring(i, 8), 2));              }              return Encoding.ASCII.GetString(byteList.ToArray());          }           public void AssignMessageValues(string str){              b1 = (int)Char.GetNumericValue(str[0]);              b2 = (int)Char.GetNumericValue(str[1]);              b3 = (int)Char.GetNumericValue(str[2]);              b4 = (int)Char.GetNumericValue(str[3]);              b5 = (int)Char.GetNumericValue(str[4]);              b6 = (int)Char.GetNumericValue(str[5]);              b7 = (int)Char.GetNumericValue(str[6]);              b8 = (int)Char.GetNumericValue(str[7]);               b9 = (int)Char.GetNumericValue(str[8]);              b10 = (int)Char.GetNumericValue(str[9]);              b11 = (int)Char.GetNumericValue(str[10]);              b12 = (int)Char.GetNumericValue(str[11]);              b13 = (int)Char.GetNumericValue(str[12]);              b14 = (int)Char.GetNumericValue(str[13]);              b15 = (int)Char.GetNumericValue(str[14]);              b16 = (int)Char.GetNumericValue(str[15]);               b17 = (int)Char.GetNumericValue(str[16]);              b18 = (int)Char.GetNumericValue(str[17]);              b19 = (int)Char.GetNumericValue(str[18]);              b20 = (int)Char.GetNumericValue(str[19]);              b21 = (int)Char.GetNumericValue(str[20]);              b22 = (int)Char.GetNumericValue(str[21]);              b23 = (int)Char.GetNumericValue(str[22]);              b24 = (int)Char.GetNumericValue(str[23]);               b25 = (int)Char.GetNumericValue(str[24]);              b26 = (int)Char.GetNumericValue(str[25]);              b27 = (int)Char.GetNumericValue(str[26]);              b28 = (int)Char.GetNumericValue(str[27]);              b29 = (int)Char.GetNumericValue(str[28]);              b30 = (int)Char.GetNumericValue(str[29]);              b31 = (int)Char.GetNumericValue(str[30]);              b32 = (int)Char.GetNumericValue(str[31]);               b33 = (int)Char.GetNumericValue(str[32]);              b34 = (int)Char.GetNumericValue(str[33]);              b35 = (int)Char.GetNumericValue(str[34]);

              b36 = (int)Char.GetNumericValue(str[35]);              b37 = (int)Char.GetNumericValue(str[36]);              b38 = (int)Char.GetNumericValue(str[37]);              b39 = (int)Char.GetNumericValue(str[38]);              b40 = (int)Char.GetNumericValue(str[39]);               b41 = (int)Char.GetNumericValue(str[40]);              b42 = (int)Char.GetNumericValue(str[41]);              b43 = (int)Char.GetNumericValue(str[42]);              b44 = (int)Char.GetNumericValue(str[43]);              b45 = (int)Char.GetNumericValue(str[44]);              b46 = (int)Char.GetNumericValue(str[45]);              b47 = (int)Char.GetNumericValue(str[46]);              b48 = (int)Char.GetNumericValue(str[47]);               b49 = (int)Char.GetNumericValue(str[48]);              b50 = (int)Char.GetNumericValue(str[49]);              b51 = (int)Char.GetNumericValue(str[50]);              b52 = (int)Char.GetNumericValue(str[51]);              b53 = (int)Char.GetNumericValue(str[52]);              b54 = (int)Char.GetNumericValue(str[53]);              b55 = (int)Char.GetNumericValue(str[54]);              b56 = (int)Char.GetNumericValue(str[55]);               b57 = (int)Char.GetNumericValue(str[56]);              b58 = (int)Char.GetNumericValue(str[57]);              b59 = (int)Char.GetNumericValue(str[58]);              b60 = (int)Char.GetNumericValue(str[59]);              b61 = (int)Char.GetNumericValue(str[60]);              b62 = (int)Char.GetNumericValue(str[61]);              b63 = (int)Char.GetNumericValue(str[62]);              b64 = (int)Char.GetNumericValue(str[63]);          }           public void AssignKeyValues(string str){              k1 = (int)Char.GetNumericValue(str[0]);              k2 = (int)Char.GetNumericValue(str[1]);              k3 = (int)Char.GetNumericValue(str[2]);              k4 = (int)Char.GetNumericValue(str[3]);              k5 = (int)Char.GetNumericValue(str[4]);              k6 = (int)Char.GetNumericValue(str[5]);              k7 = (int)Char.GetNumericValue(str[6]);              k8 = (int)Char.GetNumericValue(str[7]);               k9 = (int)Char.GetNumericValue(str[8]);              k10 = (int)Char.GetNumericValue(str[9]);              k11 = (int)Char.GetNumericValue(str[10]);              k12 = (int)Char.GetNumericValue(str[11]);              k13 = (int)Char.GetNumericValue(str[12]);              k14 = (int)Char.GetNumericValue(str[13]);              k15 = (int)Char.GetNumericValue(str[14]);              k16 = (int)Char.GetNumericValue(str[15]);               k17 = (int)Char.GetNumericValue(str[16]);              k18 = (int)Char.GetNumericValue(str[17]);              k19 = (int)Char.GetNumericValue(str[18]);              k20 = (int)Char.GetNumericValue(str[19]);              k21 = (int)Char.GetNumericValue(str[20]);              k22 = (int)Char.GetNumericValue(str[21]);              k23 = (int)Char.GetNumericValue(str[22]);              k24 = (int)Char.GetNumericValue(str[23]);               k25 = (int)Char.GetNumericValue(str[24]);              k26 = (int)Char.GetNumericValue(str[25]);              k27 = (int)Char.GetNumericValue(str[26]);              k28 = (int)Char.GetNumericValue(str[27]);              k29 = (int)Char.GetNumericValue(str[28]);              k30 = (int)Char.GetNumericValue(str[29]);

              k31 = (int)Char.GetNumericValue(str[30]);              k32 = (int)Char.GetNumericValue(str[31]);               k33 = (int)Char.GetNumericValue(str[32]);              k34 = (int)Char.GetNumericValue(str[33]);              k35 = (int)Char.GetNumericValue(str[34]);              k36 = (int)Char.GetNumericValue(str[35]);              k37 = (int)Char.GetNumericValue(str[36]);              k38 = (int)Char.GetNumericValue(str[37]);              k39 = (int)Char.GetNumericValue(str[38]);              k40 = (int)Char.GetNumericValue(str[39]);               k41 = (int)Char.GetNumericValue(str[40]);              k42 = (int)Char.GetNumericValue(str[41]);              k43 = (int)Char.GetNumericValue(str[42]);              k44 = (int)Char.GetNumericValue(str[43]);              k45 = (int)Char.GetNumericValue(str[44]);              k46 = (int)Char.GetNumericValue(str[45]);              k47 = (int)Char.GetNumericValue(str[46]);              k48 = (int)Char.GetNumericValue(str[47]);               k49 = (int)Char.GetNumericValue(str[48]);              k50 = (int)Char.GetNumericValue(str[49]);              k51 = (int)Char.GetNumericValue(str[50]);              k52 = (int)Char.GetNumericValue(str[51]);              k53 = (int)Char.GetNumericValue(str[52]);              k54 = (int)Char.GetNumericValue(str[53]);              k55 = (int)Char.GetNumericValue(str[54]);              k56 = (int)Char.GetNumericValue(str[55]);               k57 = (int)Char.GetNumericValue(str[56]);              k58 = (int)Char.GetNumericValue(str[57]);              k59 = (int)Char.GetNumericValue(str[58]);              k60 = (int)Char.GetNumericValue(str[59]);              k61 = (int)Char.GetNumericValue(str[60]);              k62 = (int)Char.GetNumericValue(str[61]);              k63 = (int)Char.GetNumericValue(str[62]);              k64 = (int)Char.GetNumericValue(str[63]);          }           public void IntitialPermutation(){              ip1 = b58;              ip2 = b50;              ip3 = b42;              ip4 = b34;              ip5 = b26;              ip6 = b18;              ip7 = b10;              ip8 = b2;               ip9 = b60;              ip10 = b52;              ip11 = b44;              ip12 = b36;              ip13 = b28;              ip14 = b20;              ip15 = b12;              ip16 = b4;               ip17 = b62;              ip18 = b54;              ip19 = b46;              ip20 = b38;              ip21 = b30;              ip22 = b22;              ip23 = b14;              ip24 = b6;               ip25 = b64;              ip26 = b56;              ip27 = b48;              ip28 = b40;              ip29 = b32;              ip30 = b24;              ip31 = b16;              ip32 = b8;               ip33 = b57;              ip34 = b49;              ip35 = b41;              ip36 = b33;              ip37 = b25;              ip38 = b17;              ip39 = b9;              ip40 = b1;               ip41 = b59;              ip42 = b51;              ip43 = b43;              ip44 = b35;              ip45 = b27;              ip46 = b19;              ip47 = b11;              ip48 = b3;               ip49 = b61;              ip50 = b53;              ip51 = b45;              ip52 = b37;              ip53 = b29;              ip54 = b21;              ip55 = b13;              ip56 = b5;               ip57 = b63;              ip58 = b55;              ip59 = b47;              ip60 = b39;              ip61 = b31;              ip62 = b23;              ip63 = b15;              ip64 = b7;          }//initial permutation           public void FinalPermuation(){              fp1 = nl8;              fp2 = nr8;              fp3 = nl16;              fp4 = nr16;              fp5 = nl24;              fp6 = nr24;              fp7 = nl32;              fp8 = nr32;               fp9 = nl7;              fp10 = nr7;              fp11 = nl15;              fp12 = nr15;              fp13 = nl23;              fp14 = nr23;              fp15 = nl31;              fp16 = nr31;               fp17 = nl6;              fp18 = nr6;              fp19 = nl14;              fp20 = nr14;              fp21 = nl22;              fp22 = nr22;              fp23 = nl30;              fp24 = nr30;               fp25 = nl5;              fp26 = nr5;              fp27 = nl13;              fp28 = nr13;              fp29 = nl21;              fp30 = nr21;              fp31 = nl29;              fp32 = nr29;               fp33 = nl4;              fp34 = nr4;              fp35 = nl12;              fp36 = nr12;              fp37 = nl20;              fp38 = nr20;              fp39 = nl28;              fp40 = nr28;               fp41 = nl3;              fp42 = nr3;              fp43 = nl11;              fp44 = nr11;              fp45 = nl19;              fp46 = nr19;              fp47 = nl27;              fp48 = nr27;               fp49 = nl2;              fp50 = nr2;              fp51 = nl10;              fp52 = nr10;              fp53 = nl18;              fp54 = nr18;              fp55 = nl26;              fp56 = nr26;               fp57 = nl1;              fp58 = nr1;              fp59 = nl9;              fp60 = nr9;              fp61 = nl17;              fp62 = nr17;              fp63 = nl25;              fp64 = nr25;          }           public void PermutedChoiceOne(){              c1 = k57;              c2 = k49;              c3 = k41;              c4 = k33;              c5 = k25;              c6 = k17;              c7 = k9;               c8 = k1;              c9 = k58;              c10 = k50;              c11 = k42;              c12 = k34;              c13 = k26;              c14 = k18;               c15 = k10;              c16 = k2;              c17 = k59;              c18 = k51;              c19 = k43;              c20 = k35;              c21 = k27;               c22 = k19;              c23 = k11;              c24 = k3;              c25 = k60;              c26 = k52;              c27 = k44;              c28 = k36;               d29 = k63;              d30 = k55;              d31 = k47;              d32 = k39;              d33 = k31;              d34 = k23;              d35 = k15;               d36 = k7;              d37 = k62;              d38 = k54;              d39 = k46;              d40 = k38;              d41 = k30;              d42 = k22;               d43 = k14;              d44 = k6;              d45 = k61;              d46 = k53;              d47 = k45;              d48 = k37;              d49 = k29;               d50 = k21;              d51 = k13;              d52 = k5;              d53 = k28;              d54 = k20;              d55 = k12;              d56 = k4;          }//PermutedChoice1

         public void ExpansionPermutation(int round){              if(round == 1){                  e1 = ip64;//32                  e2 = ip33;//1                  e3 = ip34;//2                  e4 = ip35;//3                  e5 = ip36;//4                  e6 = ip37;//5                   e7 = ip36;//4                  e8 = ip37;
                 e9 = ip38;
                 e10 = ip39;//7                  e11 = ip40;//8                  e12 = ip41;//9                   e13 = ip40;//8                  e14 = ip41;//9                  e15 = ip42;//10                  e16 = ip43;//11                  e17 = ip44;//12                  e18 = ip45;//13                   e19 = ip44;//12                  e20 = ip45;//13                  e21 = ip46;//14                  e22 = ip47;//15                  e23 = ip48;//16                  e24 = ip49;//17                   e25 = ip48;//16                  e26 = ip49;//17                  e27 = ip50;//18                  e28 = ip51;//19                  e29 = ip52;//20                  e30 = ip53;//21                   e31 = ip52;//20                  e32 = ip53;//21                  e33 = ip54;//22                  e34 = ip55;//23                  e35 = ip56;//24                  e36 = ip57;//25                   e37 = ip56;//24                  e38 = ip57;//25                  e39 = ip58;//26                  e40 = ip59;//27                  e41 = ip60;//28                  e42 = ip61;//29                   e43 = ip60;//28                  e44 = ip61;//29                  e45 = ip62;//30                  e46 = ip63;//31                  e47 = ip64;//32                  e48 = ip33;//1              }              else{                  e1 = nr32;                  e2 = nr1;                  e3 = nr2;                  e4 = nr3;                  e5 = nr4;                  e6 = nr5;                   e7 = nr4;                  e8 = nr5;                  e9 = nr6;                  e10 = nr7;                  e11 = nr8;                  e12 = nr9;                   e13 = nr8;                  e14 = nr9;                  e15 = nr10;                  e16 = nr11;                  e17 = nr12;                  e18 = nr13;                   e19 = nr12;                  e20 = nr13;                  e21 = nr14;                  e22 = nr15;                  e23 = nr16;                  e24 = nr17;                   e25 = nr16;                  e26 = nr17;                  e27 = nr18;                  e28 = nr19;                  e29 = nr20;                  e30 = nr21;                   e31 = nr20;                  e32 = nr21;                  e33 = nr22;                  e34 = nr23;                  e35 = nr24;                  e36 = nr25;                   e37 = nr24;                  e38 = nr25;                  e39 = nr26;                  e40 = nr27;                  e41 = nr28;                  e42 = nr29;                   e43 = nr28;                  e44 = nr29;                  e45 = nr30;                  e46 = nr31;                  e47 = nr32;                  e48 = nr1;              }          }//expansion permutation           public void PermutedChoiceTwo(){              pct1 = c14;              pct2 = c17;              pct3 = c11;              pct4 = c24;              pct5 = c1;              pct6 = c5;               pct7 = c3;              pct8 = c28;              pct9 = c15;              pct10 = c6;              pct11 = c21;              pct12 = c10;               pct13 = c23;              pct14 = c19;              pct15 = c12;              pct16 = c4;              pct17 = c26;              pct18 = c8;               pct19 = c16;              pct20 = c7;              pct21 = c27;              pct22 = c20;              pct23 = c13;              pct24 = c2;               pct25 = d41;              pct26 = d52;              pct27 = d31;              pct28 = d37;              pct29 = d47;              pct30 = d55;               pct31 = d30;              pct32 = d40;              pct33 = d51;              pct34 = d45;              pct35 = d33;              pct36 = d48;               pct37 = d44;              pct38 = d49;              pct39 = d39;              pct40 = d56;              pct41 = d34;              pct42 = d53;               pct43 = d46;              pct44 = d42;              pct45 = d50;              pct46 = d36;              pct47 = d29;              pct48 = d32;          }//PermutedChoiceTwo           public int XOR(int a, int b){              if(a == 0 && b == 0){                 return 0;              }              else if(a == 1 && b == 1){                 return 0;              }              else{                 return 1;              }          }//XOR           public void XOREnPC2(){              x1 = XOR(e1, pct1);              x2 = XOR(e2, pct2);              x3 = XOR(e3, pct3);              x4 = XOR(e4, pct4);              x5 = XOR(e5, pct5);              x6 = XOR(e6, pct6);              x7 = XOR(e7, pct7);              x8 = XOR(e8, pct8);              x9 = XOR(e9, pct9);              x10 = XOR(e10, pct10);              x11 = XOR(e11, pct11);              x12 = XOR(e12, pct12);              x13 = XOR(e13, pct13);              x14 = XOR(e14, pct14);              x15 = XOR(e15, pct15);              x16 = XOR(e16, pct16);              x17 = XOR(e17, pct17);              x18 = XOR(e18, pct18);              x19 = XOR(e19, pct19);              x20 = XOR(e20, pct20);              x21 = XOR(e21, pct21);              x22 = XOR(e22, pct22);              x23 = XOR(e23, pct23);              x24 = XOR(e24, pct24);              x25 = XOR(e25, pct25);              x26 = XOR(e26, pct26);              x27 = XOR(e27, pct27);              x28 = XOR(e28, pct28);              x29 = XOR(e29, pct29);              x30 = XOR(e30, pct30);              x31 = XOR(e31, pct31);              x32 = XOR(e32, pct32);              x33 = XOR(e33, pct33);              x34 = XOR(e34, pct34);              x35 = XOR(e35, pct35);              x36 = XOR(e36, pct36);              x37 = XOR(e37, pct37);              x38 = XOR(e38, pct38);              x39 = XOR(e39, pct39);              x40 = XOR(e40, pct40);              x41 = XOR(e41, pct41);              x42 = XOR(e42, pct42);              x43 = XOR(e43, pct43);              x44 = XOR(e44, pct44);              x45 = XOR(e45, pct45);              x46 = XOR(e46, pct46);              x47 = XOR(e47, pct47);              x48 = XOR(e48, pct48);          }//XOREnPCT           public void SBox1(){              string row = x1.ToString();              row = row + x6;              string column = x2.ToString();              column = column + x3;              column = column + x4;              column = column + x5;              int rowNum = Convert.ToInt32(row,2);              int columnNum = Convert.ToInt32(column,2);              int newNum = sbox1[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s1 = (int)char.GetNumericValue(temp1);              s2 =

            (int)char.GetNumericValue(temp2);              s3 = (int)char.GetNumericValue(temp3);              s4 = (int)char.GetNumericValue(temp4);          }           public void SBox2(){              string row = x7.ToString();              row = row + x12;              string column = x8.ToString();              column = column + x9;              column = column + x10;              column = column + x11;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox2[rowNum, columnNum];              //Console.WriteLine(newNum + " " + rowNum + " " + columnNum);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s5 = (int)char.GetNumericValue(temp1);              s6 = (int)char.GetNumericValue(temp2);              s7 = (int)char.GetNumericValue(temp3);              s8 = (int)char.GetNumericValue(temp4);          }           public void SBox3(){              string row = x13.ToString();              row = row + x18;              string column = x14.ToString();              column = column + x15;              column = column + x16;              column = column + x17;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox3[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s9 = (int)char.GetNumericValue(temp1);              s10 = (int)char.GetNumericValue(temp2);              s11 = (int)char.GetNumericValue(temp3);              s12 = (int)char.GetNumericValue(temp4);          }           public void SBox4(){              string row = x19.ToString();              row = row + x24;              string column = x20.ToString();              column = column + x21;              column = column + x22;              column = column + x23;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox4[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s13 = (int)char.GetNumericValue(temp1);              s14 = (int)char.GetNumericValue(temp2);              s15 = (int)char.GetNumericValue(temp3);              s16 = (int)char.GetNumericValue(temp4);          }           public void SBox5(){              string row = x25.ToString();              row = row + x30;              string column = x26.ToString();              column = column + x27;              column = column + x28;              column = column + x29;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox5[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s17 = (int)char.GetNumericValue(temp1);              s18 = (int)char.GetNumericValue(temp2);              s19 = (int)char.GetNumericValue(temp3);              s20 = (int)char.GetNumericValue(temp4);          }           public void SBox6(){              string row = x31.ToString();              row = row + x36;              string column = x32.ToString();              column = column + x33;              column = column + x34;              column = column + x35;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox6[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s21 = (int)char.GetNumericValue(temp1);              s22 = (int)char.GetNumericValue(temp2);              s23 = (int)char.GetNumericValue(temp3);              s24 = (int)char.GetNumericValue(temp4);          }           public void SBox7(){              string row = x37.ToString();              row = row + x42;              string column = x38.ToString();              column = column + x39;              column = column + x40;              column = column + x41;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox7[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s25 = (int)char.GetNumericValue(temp1);              s26 = (int)char.GetNumericValue(temp2);              s27 = (int)char.GetNumericValue(temp3);              s28 = (int)char.GetNumericValue(temp4);          }           public void SBox8(){              string row = x43.ToString();              row = row + x48;              string column = x44.ToString();              column = column + x45;              column = column + x46;              column = column + x47;              int rowNum = Convert.ToInt32(row, 2);              int columnNum = Convert.ToInt32(column, 2);              int newNum = sbox8[rowNum, columnNum];              //Console.WriteLine(newNum + " " + row + " " + column);              string binNum = Convert.ToString(newNum, 2);              if (binNum.Length == 0)              {                 binNum = "0000";              }              else if (binNum.Length < 2)              {                 binNum = "000" + binNum;              }              else if (binNum.Length < 3)              {                 binNum = "00" + binNum;              }              else if (binNum.Length < 4)              {                 binNum = "0" + binNum;              }              char temp1 = binNum[0];              char temp2 = binNum[1];              char temp3 = binNum[2];              char temp4 = binNum[3];              s29 = (int)char.GetNumericValue(temp1);              s30 = (int)char.GetNumericValue(temp2);              s31 = (int)char.GetNumericValue(temp3);              s32 = (int)char.GetNumericValue(temp4);          }           public void Permutation(){              p1 = s16;              p2 = s7;              p3 = s20;              p4 = s21;               p5 = s29;              p6 = s12;              p7 = s28;              p8 = s17;               p9 = s1;              p10 = s15;              p11 = s23;              p12 = s26;               p13 = s5;              p14 = s18;              p15 = s31;              p16 = s10;               p17 = s2;              p18 = s8;              p19 = s24;              p20 = s14;               p21 = s32;              p22 = s27;              p23 = s3;              p24 = s9;               p25 = s19;              p26 = s13;              p27 = s30;              p28 = s6;               p29 = s22;              p30 = s11;              p31 = s4;
             p32 = s25;          }//Permutation           public void XORPermnL(int round){              if (round == 1){                  nr1 = XOR(p1, ip1);                  nr2 = XOR(p2, ip2);                  nr3 = XOR(p3, ip3);                  nr4 = XOR(p4, ip4);                  nr5 = XOR(p5, ip5);                  nr6 = XOR(p6, ip6);                  nr7 = XOR(p7, ip7);                  nr8 = XOR(p8, ip8);                   nr9 = XOR(p9, ip9);                  nr10 = XOR(p10, ip10);                  nr11 = XOR(p11, ip11);                  nr12 = XOR(p12, ip12);                  nr13 = XOR(p13, ip13);                  nr14 = XOR(p14, ip14);                  nr15 = XOR(p15, ip15);                  nr16 = XOR(p16, ip16);                   nr17 = XOR(p17, ip17);                  nr18 = XOR(p18, ip18);                  nr19 = XOR(p19, ip19);                  nr20 = XOR(p20, ip20);                  nr21 = XOR(p21, ip21);                  nr22 = XOR(p22, ip22);                  nr23 = XOR(p23, ip23);                  nr24 = XOR(p24, ip24);                   nr25 = XOR(p25, ip25);                  nr26 = XOR(p26, ip26);                  nr27 = XOR(p27, ip27);                  nr28 = XOR(p28, ip28);                  nr29 = XOR(p29, ip29);                  nr30 = XOR(p30, ip30);                  nr31 = XOR(p31, ip31);                  nr32 = XOR(p32, ip32);              }              else{                  nr1 = XOR(p1, nl1);                  nr2 = XOR(p2, nl2);                  nr3 = XOR(p3, nl3);                  nr4 = XOR(p4, nl4);                  nr5 = XOR(p5, nl5);                  nr6 = XOR(p6, nl6);                  nr7 = XOR(p7, nl7);                  nr8 = XOR(p8, nl8);                   nr9 = XOR(p9, nl9);                  nr10 = XOR(p10, nl10);                  nr11 = XOR(p11, nl11);                  nr12 = XOR(p12, nl12);                  nr13 = XOR(p13, nl13);                  nr14 = XOR(p14, nl14);                  nr15 = XOR(p15, nl15);                  nr16 = XOR(p16, nl16);                   nr17 = XOR(p17, nl17);                  nr18 = XOR(p18, nl18);                  nr19 = XOR(p19, nl19);                  nr20 = XOR(p20, nl20);                  nr21 = XOR(p21, nl21);                  nr22 = XOR(p22, nl22);                  nr23 = XOR(p23, nl23);                  nr24 = XOR(p24, nl24);                   nr25 = XOR(p25, nl25);                  nr26 = XOR(p26, nl26);                  nr27 = XOR(p27, nl27);                  nr28 = XOR(p28, nl28);                  nr29 = XOR(p29, nl29);                  nr30 = XOR(p30, nl30);                  nr31 = XOR(p31, nl31);                  nr32 = XOR(p32, nl32);              }          }//XORSBoxnL           public void LShift(int shifts){              for (int i = 0; i < shifts; i++){                  int temp1 = c2;                  int temp2 = c3;                  int temp3 = c4;                  int temp4 = c5;                  int temp5 = c6;                  int temp6 = c7;                  int temp7 = c8;                   int temp8 = c9;                  int temp9 = c10;                  int temp10 = c11;                  int temp11 = c12;                  int temp12 = c13;                  int temp13 = c14;                  int temp14 = c15;                   int temp15 = c16;                  int temp16 = c17;                  int temp17 = c18;                  int temp18 = c19;                  int temp19 = c20;                  int temp20 = c21;                  int temp21 = c22;                   int temp22 = c23;                  int temp23 = c24;                  int temp24 = c25;                  int temp25 = c26;                  int temp26 = c27;                  int temp27 = c28;                  int temp28 = c1;                   int temp29 = d30;                  int temp30 = d31;                  int temp31 = d32;                  int temp32 = d33;                  int temp33 = d34;                  int temp34 = d35;                  int temp35 = d36;                   int temp36 = d37;                  int temp37 = d38;                  int temp38 = d39;                  int temp39 = d40;                  int temp40 = d41;                  int temp41 = d42;                  int temp42 = d43;                   int temp43 = d44;                  int temp44 = d45;                  int temp45 = d46;                  int temp46 = d47;                  int temp47 = d48;                  int temp48 = d49;                  int temp49 = d50;                   int temp50 = d51;                  int temp51 = d52;                  int temp52 = d53;                  int temp53 = d54;                  int temp54 = d55;                  int temp55 = d56;                  int temp56 = d29;                    c1 = temp1;                  c2 = temp2;                  c3 = temp3;                  c4 = temp4;                  c5 = temp5;                  c6 = temp6;                  c7 = temp7;                   c8 = temp8;                  c9 = temp9;                  c10 = temp10;                  c11 = temp11;                  c12 = temp12;                  c13 = temp13;                  c14 = temp14;                   c15 = temp15;                  c16 = temp16;                  c17 = temp17;                  c18 = temp18;                  c19 = temp19;                  c20 = temp20;                  c21 = temp21;                   c22 = temp22;                  c23 = temp23;                  c24 = temp24;                  c25 = temp25;                  c26 = temp26;                  c27 = temp27;                  c28 = temp28;                   d29 = temp29;                  d30 = temp30;                  d31 = temp31;                  d32 = temp32;                  d33 = temp33;                  d34 = temp34;                  d35 = temp35;                   d36 = temp36;                  d37 = temp37;                  d38 = temp38;                  d39 = temp39;                  d40 = temp40;                  d41 = temp41;                  d42 = temp42;                   d43 = temp43;                  d44 = temp44;                  d45 = temp45;                  d46 = temp46;                  d47 = temp47;                  d48 = temp48;                  d49 = temp49;                   d50 = temp50;                  d51 = temp51;                  d52 = temp52;                  d53 = temp53;                  d54 = temp54;                  d55 = temp55;                  d56 = temp56;              }          }           public void getOldR(int round){              if(round > 1){                  or1 = nr1;                  or2 = nr2;                  or3 = nr3;                  or4 = nr4;                  or5 = nr5;                  or6 = nr6;                  or7 = nr7;                  or8 = nr8;                   or9 = nr9;                  or10 = nr10;                  or11 = nr11;                  or12 = nr12;                  or13 = nr13;                  or14 = nr14;                  or15 = nr15;                  or16 = nr16;                   or17 = nr17;                  or18 = nr18;                  or19 = nr19;                  or20 = nr20; 

                 or21 = nr21;                  or22 = nr22;                  or23 = nr23;                  or24 = nr24;                   or25 = nr25;                  or26 = nr26;                  or27 = nr27;                  or28 = nr28;                  or29 = nr29;                  or30 = nr30;                  or31 = nr31;                  or32 = nr32;              }          }           public void MakeNewL(int round){              if (round == 1)              {                  nl1 = ip33;                  nl2 = ip34;                  nl3 = ip35;                  nl4 = ip36;                  nl5 = ip37;                  nl6 = ip38;                  nl7 = ip39;                  nl8 = ip40;                   nl9 = ip41;                  nl10 = ip42;                  nl11 = ip43;                  nl12 = ip44;                  nl13 = ip45;                  nl14 = ip46;                  nl15 = ip47;                  nl16 = ip48;                   nl17 = ip49;                  nl18 = ip50;                  nl19 = ip51;                  nl20 = ip52;                  nl21 = ip53;                  nl22 = ip54;                  nl23 = ip55;                  nl24 = ip56;                   nl25 = ip57;                  nl26 = ip58;                  nl27 = ip59;                  nl28 = ip60;                  nl29 = ip61;                  nl30 = ip62;                  nl31 = ip63;                  nl32 = ip64;              }              else{                  nl1 = or1;                  nl2 = or2;                  nl3 = or3;                  nl4 = or4;                  nl5 = or5;                  nl6 = or6;                  nl7 = or7;                  nl8 = or8;                   nl9 = or9;                  nl10 = or10;                  nl11 = or11;                  nl12 = or12;                  nl13 = or13;                  nl14 = or14;                  nl15 = or15;                  nl16 = or16;                   nl17 = or17;                  nl18 = or18;                  nl19 = or19;                  nl20 = or20;                  nl21 = or21;                  nl22 = or22;                  nl23 = or23;                  nl24 = or24;                   nl25 = or25;                  nl26 = or26;                  nl27 = or27;                  nl28 = or28;                  nl29 = or29;                  nl30 = or30;                  nl31 = or31;                  nl32 = or32;              }          }//MakeNewL      } }  
